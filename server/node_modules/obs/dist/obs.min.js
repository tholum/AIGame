/*! obs 0.11.2 Original author Alan Plum <me@pluma.io>. Released into the Public Domain under the UNLICENSE. @preserve */
var PubSub=require("sublish").PubSub,slice=Array.prototype.slice,isArray=Array.isArray?Array.isArray:function(t){return Object.prototype.toString.call(t)==="[object Array]"},contains=Array.prototype.indexOf?function(t,e){return!!~t.indexOf(e)}:function(t,e){for(var i=0;i<t.length;i++){if(t[i]===e){return true}}return false};function ext(t){var e=slice.call(arguments,1);for(var i=0;i<e.length;i++){var r=e[i];for(var n in r){if(r.hasOwnProperty(n)){t[n]=r[n]}}}return t}function parseComputedConfig(t){var e=t[0];if(typeof e==="function"){e={compute:t[0]};if(t.length>1){if(typeof t[1]==="function"){e.write=t[1];if(t.length>2){e.watch=t[2]}}else{e.watch=t[1]}}}return e}function obs(t){function e(t){if(arguments.length){if(typeof e.write==="function"){e.write.call(e.context,t)}else{throw new Error("This observable cannot be written to!")}}else{if(typeof e.read==="function"){return e.read.call(e.context)}else{throw new Error("This observable cannot be read from!")}}}ext(e,PubSub.prototype,{context:t.context||e,read:t.read,write:t.write,onNotify:function(t){return function(){t.call(e)}}(t.onNotify||function(){}),_initialValue:t.value,_currentValue:t.value,_previousValue:undefined,_subscriptions:[]},obs.fn);PubSub.apply(e);if(t.watch){e.watch.apply(e,isArray(t.watch)?t.watch:[t.watch])}return e}obs.fn={__is_obs__:true,notify:function(){this.dirty=this._currentValue===this._initialValue;this.publish(this._currentValue,this._previousValue)},peek:function(){return this._currentValue},commit:function(){this._initialValue=this._currentValue;this.dirty=false},reset:function(){this._previousValue=this._currentValue;this._currentValue=this._initialValue;this.notify()},watch:function(){var t=slice.call(arguments,0),e,i;for(i=0;i<t.length;i++){e=t[i];if(contains(this._subscriptions,e)){continue}if(e&&typeof e.subscribe==="function"){e.subscribe(this.onNotify);this._subscriptions.push(e)}}return this},unwatch:function(){var t=slice.call(arguments,0),e=this._subscriptions,i,r;for(i=0;i<t.length;i++){r=t[i];if(r&&typeof r.unsubscribe==="function"){r.unsubscribe(this.onNotify)}}this._subscriptions=[];for(i=0;i<e.length;i++){r=e[i];if(!contains(t,r)){this._subscriptions.push(r)}}return this},dismiss:function(){this.unwatch.apply(this,this._subscriptions)}};obs.prop=function(t){return obs({read:function(){return this._currentValue},write:function(t){this._previousValue=this._currentValue;this._currentValue=t;this.notify()},value:t})};obs.computed=function(t){t=parseComputedConfig(arguments);var e=obs(ext({},t,{read:function(){return e._currentValue},onNotify:function(){this._previousValue=this._currentValue;this._currentValue=t.compute.call(this.context);this.notify()}}));if(t.compute){e._initialValue=t.compute.call(e.context);e._currentValue=e._initialValue}if(t.watch){e.watch.apply(e,isArray(t.watch)?t.watch:[t.watch])}return e};obs.computed.lazy=function(t){t=parseComputedConfig(arguments);var e=true;var i=obs(ext({},t,{context:t.context,read:function(){if(e){e=false;i._previousValue=i._currentValue;i._currentValue=t.compute.call(this);i.notify()}return i._currentValue},write:t.write,onNotify:function(){e=true},watch:t.watch}));return i};module.exports=obs;