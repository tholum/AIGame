{
  "name": "ml-js",
  "version": "0.0.10",
  "description": "Machine Learning library for Node.js",
  "main": "./bin/ml.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "grunt"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/nicolaspanel/ml-js.git"
  },
  "keywords": [
    "machine",
    "learning",
    "ml",
    "qlearing",
    "neural",
    "networks",
    "svm",
    "support",
    "vector",
    "machine",
    "agent"
  ],
  "author": {
    "name": "Nicolas Panel"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/nicolaspanel/ml-js/issues"
  },
  "homepage": "https://github.com/nicolaspanel/ml-js",
  "devDependencies": {
    "mocha": "latest",
    "should": "latest",
    "grunt": "~0.4.1",
    "grunt-cli": "latest",
    "grunt-contrib-jshint": "~0.4.3",
    "grunt-mocha-test": "~0.2.2",
    "sinon": "~1.9.0",
    "blanket": "~1.1.6"
  },
  "dependencies": {
    "coffee-script": "latest",
    "underscore": "latest",
    "fann": "~0.2.3",
    "numeric": "latest",
    "async": "latest",
    "node-svm": "latest"
  },
  "readme": "ml-js\n====\n\nMachine Learning library for Node.js\n\nStatus : Under development\n\n[![NPM](https://nodei.co/npm/ml-js.png?downloads=true)](https://nodei.co/npm/ml-js/)\n\n## Installation\nml-js depends on [FANN](http://leenissen.dk/fann/wp/) (Fast Artificial Neural Network Library) witch is a free, open source and high performence neural network library.\n\nTo build great app with it : \n* Make sure you glib2 is installed  : `sudo apt-get install glib2.0`\n* make sure pkg-config is installed : `sudo apt-get install pkg-config`\n* make sure cmake is installed      : `sudo apt-get install cmake`\n* Install FANN : \n  * download  [here](http://leenissen.dk/fann/wp/download/)\n  * unzip\n  * goto to FANN directory\n  * run `cmake .` and `sudo make install`\n  * run `sudo ldconfig`\n\nFinally, you should be able to install all npm dependancies with  `npm install ml-js --save`\n\n## Supported ML techniques\nml-js currently supports : \n* Supervised learning :\n  * `fann` - Neural Networks provided by [node-fann](https://github.com/rlidwka/node-fann) addon\n  * `svm`  - Support vector machine provided by [node-svm](https://github.com/nicolaspanel/node-svm) addon\n* Reinforcement learning :\n  * `QLearning`, model-free reinforcement learning technique\n*  Exploration policies\n  * `BoltzmannExploration`\n\n## Getting started\n\n### QLearning Example\n[Q-learning](http://en.wikipedia.org/wiki/Q-learning) is a model-free reinforcement learning technique. Specifically, Q-learning can be used to find an optimal action-selection policy for any given [MDP](http://en.wikipedia.org/wiki/Markov_decision_process).\n\n```coffeescript\nml = require 'ml-js'\n\nmyprocess = new SomeProcess\n\nqValues = new ml.CSDAQValues nb_features, nb_actions\n\noptions = {\n  learning_rate: 0.1\n  discount_factor: 0.9\n  exploration_policy: new ml.BoltzmannExploration 0.2 # temperature\n}\nagent = new ml.QLearningAgent qValues, options\n\nmyprocess.on 'do_something', (currentState)->\n  next_action = agent.getAction currentState\n  myprocess.do next_action\n  \nmyprocess.on 'feedback_received', (initState, action, newState, reward)->\n    agent.learn initState, action, newState, reward\n```\n\nAvailables QValues managers : \n * `CSDAQValues` for  Continuous States and Discrete Actions QValues. It uses neural networks to perform learning on continuous states.  ",
  "readmeFilename": "README.md",
  "_id": "ml-js@0.0.10",
  "_from": "ml-js@"
}
