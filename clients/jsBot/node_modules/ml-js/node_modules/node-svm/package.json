{
  "name": "node-svm",
  "version": "1.3.0",
  "description": "Support Vector Machine for nodejs",
  "main": "./lib/nodesvm.js",
  "scripts": {
    "test": "grunt",
    "install": "node-gyp rebuild"
  },
  "config": {
    "blanket": {
      "pattern": [
        "node-svm/lib"
      ]
    }
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/nicolaspanel/node-svm.git"
  },
  "keywords": [
    "svm",
    "machine learning",
    "libsvm"
  ],
  "author": {
    "name": "Nicolas Panel"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/nicolaspanel/node-svm/issues"
  },
  "homepage": "https://github.com/nicolaspanel/node-svm",
  "dependencies": {
    "async": "~0.6.2",
    "moment": "^2.7.0",
    "nan": "^1.2.0",
    "node-gyp": "~0.13.0",
    "numeric": "~1.2.6",
    "underscore": "~1.6.0"
  },
  "devDependencies": {
    "mocha": "~1.17.1",
    "should": ">=0.5.x",
    "grunt": "~0.4.1",
    "grunt-cli": "latest",
    "grunt-contrib-jshint": "~0.4.3",
    "grunt-node-gyp": "~0.3.0",
    "humanize-duration": "~0.8.0",
    "blanket": "~1.1.6",
    "coveralls": "~2.10.0",
    "mocha-lcov-reporter": "0.0.1",
    "grunt-mocha-cov": "~0.2.1"
  },
  "gypfile": true,
  "readme": "node-svm\n========\n\n[libsvm](http://www.csie.ntu.edu.tw/~cjlin/libsvm/) (Support Vector Machine library) addon for nodejs\n\n[![Build Status](https://travis-ci.org/nicolaspanel/node-svm.png)](https://travis-ci.org/nicolaspanel/node-svm)\n[![Coverage Status](https://coveralls.io/repos/nicolaspanel/node-svm/badge.png?branch=master)](https://coveralls.io/r/nicolaspanel/node-svm?branch=master)\n\n[![NPM](https://nodei.co/npm/node-svm.png?downloads=true)](https://nodei.co/npm/node-svm/)\n\n# Support Vector Machines\n[Wikipedia](http://en.wikipedia.org/wiki/Support_vector_machine)  :\n\n>Support vector machines are supervised learning models that analyze data and recognize patterns. \n>SVMs belong to a family of generalized linear classifiers and can be interpreted as an extension of the perceptron. They can also be considered a special case of Tikhonov regularization. A special property is that they simultaneously minimize the empirical classification error and maximize the geometric margin; hence they are also known as maximum margin classifiers.\n>[![Wikipedia image](http://upload.wikimedia.org/wikipedia/commons/1/1b/Kernel_Machine.png)](http://en.wikipedia.org/wiki/File:Kernel_Machine.png)\n\n# How to use it\nFirst of all, if you are not familiar with SVM, I highly recommend to read [this guide](http://www.csie.ntu.edu.tw/~cjlin/papers/guide/guide.pdf).\n\nHere's an example of using it to approximate the XOR function :\n```javascript\nvar nodesvm = require('node-svm');\nvar xorProblem = [\n  [[0, 0], 0],\n  [[0, 1], 1],\n  [[1, 0], 1],\n  [[1, 1], 0]\n];\nvar svm = new nodesvm.CSVC({ // classification \n  kernel: nodesvm.KernelTypes.RBF,\n  C: 1.0,\n  gamma: 0,5\n});\n\nsvm.once('trained', function(report) {\n  // 'report' provides information about svm's accuracy\n  [0,1].forEach(function(a){\n    [0,1].forEach(function(b){\n      var prediction = svm.predict([a, b]); \n      console.log(\"%d XOR %d => %d\", a, b, prediction);\n    });\n  });\n});\n\nsvm.train(xorProblem);\n\n```\nNotice : \n * There's no reason to use SVM to figure out XOR BTW...\n * The example show how to use `C-SVC` classifier but you can also use :\n  * `NU-SVC` with `var svm = new nodesvm.NuSVC(options)` (classification)\n  * `EPSILON-SVR` with `var svm = new nodesvm.EpsilonSVR(options)` (regression)\n  * `NU-SVR` with `var svm = new nodesvm.NuSVR(options)` (regression)\n * `ONE-CLASS` SVM is not supported for now\n\nMore examples are available in the [same name folder](https://github.com/nicolaspanel/node-svm/tree/master/examples).\n\n## Initialization\nOptions with default values are listed below : \n```javascript\nvar nodesvm = require('node-svm');\n\nvar svm = new nodesvm.XXXX({\n  // kernels parameters\n  kernelType: nodesvm.KernelTypes.RBF,  \n  degree: [2,3,4],                      // for POLY kernel\n  gamma: [0.03125, 0.125, 0.5, 2, 8],   // for POLY, RBF and SIGMOID kernels\n  r: [0.125, 0.5, 2, 8],                // for POLY and SIGMOID kernels\n  \n  // SVM specific parameters\n  C: [0.03125, 0.125, 0.5, 2, 8],       // cost for C_SVC, EPSILON_SVR and NU_SVR\n  nu: [0.03125, 0.125, 0.5, 0.75, 1],   // for NU_SVC and NU_SVR\n  epsilon: [0.03125, 0.125, 0.5, 2, 8], // for EPSILON-SVR\n\n  // training options\n  nFold: 4,               // for cross validation \n  normalize: true,        // whether to use mean normalization during data pre-processing\n  reduce: true,           // whether to use PCA to reduce dataset dimension during data pre-processing\n  retainedVariance: 0.99, // Define the acceptable impact on data integrity (if PCA activated)\n  eps: 1e-3,              // stopping criteria \n  cacheSize: 100,         // cache siez in MB        \n  probability : false     // whether to train a SVC or SVR model for probability estimates\n});\n```\nNotice : \n * `degree`, `gamma`, `r`, `C`, `nu` and `epsilon` can take one or more values. Example :  `degree: [2,3,4]` and `degree: 3` are both corrects\n * If at least one parameter as multiple options `node-svm` will go through all the combinations to see which one gives the best predictions (i.e. maximize [f-score](http://en.wikipedia.org/wiki/F1_score) for classification and minimize [Mean Squared Error](http://en.wikipedia.org/wiki/Mean_squared_error) for regression).\n\n###Available kernels\n * Linear     : `nodesvm.KernelTypes.LINEAR`\n * Polynomial : `nodesvm.KernelTypes.POLY`\n * RBF        : `nodesvm.KernelTypes.RBF`\n * Sigmoid    : `nodesvm.KernelTypes.SIGMOID`\n\n###Available SVM types\n\n * `C_SVC`      : multi-class classification\n * `NU_SVC`     : multi-class classification \n * `EPSILON_SVR`: regression\n * `NU_SVR`     : regression\n\nNotice : `ONE_CLASS` SVM is not supported (yet) \n\n##Training\nSVMs can be trained using `svm#train(dataset, [callback])`\n\nNotice :  Once trained, you can use `svm#saveToFile(path)` method to backup your svm model. Then you will be able to create new `svm` instances without having to train them again and again.\n\nPseudo code : \n```javascript\nvar svm = new nodesvm.SVM(options);\n\nsvm.once('trained', function{\n  svm.saveToFile('./path/to/myFile.model'); // svm need to be trained before you can save it\n  //...\n  var svm2 = nodesvm.loadSvmFromFile('./path/to/myFile.model');\n  svm2.predict(inputs);\n  // ...\n})\n\nsvm.train(dataset); \n```\n\n##Predictions\nOnce trained, you can use your `svm` to predict values for given inputs. You can do that : \n * Synchronously using `svm#predict(inputs)`\n * Asynchronously using `svm#predictAsync(inputs, callback)`\n\nIf you are working on a classification problem and **if you enabled probabilities during initialization** (see [initialization ยง](https://github.com/nicolaspanel/node-svm#initialization)), you can also predict probabilities for each class  : \n * Synchronously using `svm#predictProbabilities(inputs)`. \n * Asynchronously using `svm#predictProbabilitiesAsync(inputs, callback)`.\n\nNotice : `inputs` must be a 1d array of numbers\n\n## Features\nnode-svm provide additional features that allow you to :\n * [Mean normalize](http://en.wikipedia.org/wiki/Normalization_(statistics)) your dataset\n * Evaluate your `svm` against a test file\n * Perform cross validation on your dataset\n * Evaluate various combinaisons and find the best parameters\n * Reduce your dataset dimension using [Principal Component Analysis (PCA)](http://en.wikipedia.org/wiki/Principal_component_analysis)\n\nSee [examples folder](https://github.com/nicolaspanel/node-svm/blob/master/examples) for more informations.\n\n# How it work\n`node-svm` uses the official libsvm C++ library, version 3.18. For more informations, see also : \n * [libsvm web site](http://www.csie.ntu.edu.tw/~cjlin/libsvm/)\n * Chih-Chung Chang and Chih-Jen Lin, LIBSVM : a library for support vector machines. ACM Transactions on Intelligent Systems and Technology, 2:27:1--27:27, 2011.\n * [Wikipedia article about SVM](https://en.wikipedia.org/wiki/Support_vector_machine)\n * [node addons](http://nodejs.org/api/addons.html)\n\n# Contributions\nFeel free to fork and improve/enhance `node-svm` in any way your want.\n\nIf you feel that the community will benefit from your changes, please send a pull request : \n * Fork the project.\n * Make your feature addition or bug fix.\n * Add documentation if necessary.\n * Add tests for it. This is important so I don't break it in a future version unintentionally (run `grunt` or `npm test`).\n * Send a pull request to the `develop` branch. \n\n#FAQ\n###Segmentation fault\nQ : Node returns 'segmentation fault' error during training. What's going on?\n\nA : Your dataset is empty or its format is incorrect.\n\n###Difference between nu-SVC and C-SVC\nQ : What is the difference between nu-SVC and C-SVC?\n\nA : [Answer here](http://www.csie.ntu.edu.tw/~cjlin/libsvm/faq.html#f411)\n\n###Other questions\n * Take a look at [libsvm's FAQ](http://www.csie.ntu.edu.tw/~cjlin/libsvm/faq.html).\n * Create [an issue](https://github.com/nicolaspanel/node-svm/issues)\n\n# License\nMIT\n\n[![githalytics.com alpha](https://cruel-carlota.pagodabox.com/92d9dd8573d8b458d19a240629fea97a \"githalytics.com\")](http://githalytics.com/nicolaspanel/node-svm)\n",
  "readmeFilename": "README.md",
  "_id": "node-svm@1.3.0",
  "_from": "node-svm@latest"
}
